// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// User model - Usuários do sistema
model User {
    id          String      @id @default(cuid())
    login       String      @unique
    cnpj        String? // CNPJ da empresa (opcional, para empresas clientes)
    accessLevel AccessLevel @default(CLIENT)
    password    String // Hash da senha

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("users")
}

// MoM model - Minutes of Meeting (Atas)
model MeetingMinute {
    id              String               @id @default(cuid())
    cnpj            String
    status          MeetingMinutesStatus @default(PENDING)
    summary         String
    signaturesValid Boolean              @default(false)
    inconsistencies String[]
    pdfUrl          String?
    photoUrl        String?
    signatureUrl    String?
    blockchainHash  String?              @unique
    blockchainTxId  String?              @unique
    notaryId        String?

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    llmData  LLMData?
    comments String[]

    // Índices para performance
    @@index([cnpj])
    @@index([status])
    @@index([blockchainHash])
    @@map("moms")
}

// LLM Data - Dados extraídos pelo LLM
model LLMData {
    id            String   @id @default(cuid())
    summary       String
    agenda        String
    subjects      String[] // Array de strings
    deliberations String[] // Array de strings
    signatures    String[] // Array de strings
    keywords      String[] // Array de strings

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relacionamento com MoM (1:1)
    momId String        @unique
    mom   MeetingMinute @relation(fields: [momId], references: [id], onDelete: Cascade)

    // Relacionamento com participantes
    participants Participant[]

    @@map("llm_data")
}

// Participantes da ata
model Participant {
    id   String @id @default(cuid())
    name String
    rg   String
    cpf  String
    role String

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relacionamento com LLMData
    llmDataId String
    llmData   LLMData @relation(fields: [llmDataId], references: [id], onDelete: Cascade)

    // Índices
    @@index([cpf])
    @@index([rg])
    @@map("participants")
}

model AppLog {
    id        String   @id @default(uuid()) @db.Uuid
    type      String?  @map("type")
    userId    String?  @map("user_id")
    info      Json?    @map("info")
    createdAt DateTime @default(now()) @map("created_at")

    @@map("app_logs")
}

model Signature {
    id        String   @id @default(cuid())
    url       String
    cpf       String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Enums
enum AccessLevel {
    CLIENT
    NOTARY
}

enum MeetingMinutesStatus {
    PENDING
    UNDER_REVIEW
    AUTHENTICATED
    REJECTED
}
